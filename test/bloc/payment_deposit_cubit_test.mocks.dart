// Mocks generated by Mockito 5.4.0 from annotations
// in t_chain_payment_sdk/test/bloc/payment_deposit_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:mockito/mockito.dart' as _i1;
import 'package:t_chain_payment_sdk/data/asset.dart' as _i16;
import 'package:t_chain_payment_sdk/data/gas_fee.dart' as _i17;
import 'package:t_chain_payment_sdk/data/merchant_transaction.dart' as _i14;
import 'package:t_chain_payment_sdk/data/pancake_swap.dart' as _i19;
import 'package:t_chain_payment_sdk/data/payment_discount_fee.dart' as _i18;
import 'package:t_chain_payment_sdk/data/response/data_response.dart' as _i13;
import 'package:t_chain_payment_sdk/data/t_chain_payment_action.dart' as _i11;
import 'package:t_chain_payment_sdk/repo/payment_repo.dart' as _i9;
import 'package:t_chain_payment_sdk/repo/wallet_repos.dart' as _i15;
import 'package:t_chain_payment_sdk/services/blockchain_service.dart' as _i4;
import 'package:t_chain_payment_sdk/services/gas_station_api.dart' as _i3;
import 'package:t_chain_payment_sdk/services/t_chain_api.dart' as _i2;
import 'package:t_chain_payment_sdk/smc/bep_20_smc.dart' as _i5;
import 'package:t_chain_payment_sdk/smc/pancake_swap_smc.dart' as _i7;
import 'package:t_chain_payment_sdk/smc/payment_smc.dart' as _i6;
import 'package:t_chain_payment_sdk/t_chain_payment_sdk.dart' as _i12;
import 'package:web3dart/web3dart.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTChainAPI_0 extends _i1.SmartFake implements _i2.TChainAPI {
  _FakeTChainAPI_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGasStationAPI_1 extends _i1.SmartFake implements _i3.GasStationAPI {
  _FakeGasStationAPI_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBlockchainService_2 extends _i1.SmartFake
    implements _i4.BlockchainService {
  _FakeBlockchainService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBep20Smc_3 extends _i1.SmartFake implements _i5.Bep20Smc {
  _FakeBep20Smc_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePaymentSmc_4 extends _i1.SmartFake implements _i6.PaymentSmc {
  _FakePaymentSmc_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePancakeSwapSmc_5 extends _i1.SmartFake
    implements _i7.PancakeSwapSmc {
  _FakePancakeSwapSmc_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransaction_6 extends _i1.SmartFake implements _i8.Transaction {
  _FakeTransaction_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBigInt_7 extends _i1.SmartFake implements BigInt {
  _FakeBigInt_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PaymentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentRepository extends _i1.Mock implements _i9.PaymentRepository {
  @override
  _i2.TChainAPI get api => (super.noSuchMethod(
        Invocation.getter(#api),
        returnValue: _FakeTChainAPI_0(
          this,
          Invocation.getter(#api),
        ),
        returnValueForMissingStub: _FakeTChainAPI_0(
          this,
          Invocation.getter(#api),
        ),
      ) as _i2.TChainAPI);
  @override
  _i10.Future<Uri?> generateDeeplink({
    required _i11.TChainPaymentAction? action,
    required String? walletScheme,
    required String? notes,
    required double? amount,
    required _i12.Currency? currency,
    required String? chainId,
    String? bundleID,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateDeeplink,
          [],
          {
            #action: action,
            #walletScheme: walletScheme,
            #notes: notes,
            #amount: amount,
            #currency: currency,
            #chainId: chainId,
            #bundleID: bundleID,
          },
        ),
        returnValue: _i10.Future<Uri?>.value(),
        returnValueForMissingStub: _i10.Future<Uri?>.value(),
      ) as _i10.Future<Uri?>);
  @override
  _i10.Future<_i13.DataResponse<_i12.MerchantInfo>?> getMerchantInfo(
          {required String? qrCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMerchantInfo,
          [],
          {#qrCode: qrCode},
        ),
        returnValue: _i10.Future<_i13.DataResponse<_i12.MerchantInfo>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i13.DataResponse<_i12.MerchantInfo>?>.value(),
      ) as _i10.Future<_i13.DataResponse<_i12.MerchantInfo>?>);
  @override
  _i10.Future<_i13.DataResponse<Map<String, dynamic>>?> getExchangeRate() =>
      (super.noSuchMethod(
        Invocation.method(
          #getExchangeRate,
          [],
        ),
        returnValue:
            _i10.Future<_i13.DataResponse<Map<String, dynamic>>?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i13.DataResponse<Map<String, dynamic>>?>.value(),
      ) as _i10.Future<_i13.DataResponse<Map<String, dynamic>>?>);
  @override
  _i10.Future<_i14.MerchantTransaction?> createMerchantTransaction({
    required String? address,
    required double? amount,
    required _i12.Currency? currency,
    required String? notes,
    required String? tokenName,
    required String? externalMerchantId,
    required String? chainId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMerchantTransaction,
          [],
          {
            #address: address,
            #amount: amount,
            #currency: currency,
            #notes: notes,
            #tokenName: tokenName,
            #externalMerchantId: externalMerchantId,
            #chainId: chainId,
          },
        ),
        returnValue: _i10.Future<_i14.MerchantTransaction?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i14.MerchantTransaction?>.value(),
      ) as _i10.Future<_i14.MerchantTransaction?>);
}

/// A class which mocks [WalletRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletRepository extends _i1.Mock implements _i15.WalletRepository {
  @override
  _i3.GasStationAPI get gasStationAPI => (super.noSuchMethod(
        Invocation.getter(#gasStationAPI),
        returnValue: _FakeGasStationAPI_1(
          this,
          Invocation.getter(#gasStationAPI),
        ),
        returnValueForMissingStub: _FakeGasStationAPI_1(
          this,
          Invocation.getter(#gasStationAPI),
        ),
      ) as _i3.GasStationAPI);
  @override
  _i4.BlockchainService get blockchainService => (super.noSuchMethod(
        Invocation.getter(#blockchainService),
        returnValue: _FakeBlockchainService_2(
          this,
          Invocation.getter(#blockchainService),
        ),
        returnValueForMissingStub: _FakeBlockchainService_2(
          this,
          Invocation.getter(#blockchainService),
        ),
      ) as _i4.BlockchainService);
  @override
  bool get isReady => (super.noSuchMethod(
        Invocation.getter(#isReady),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i10.Future<bool> setup() => (super.noSuchMethod(
        Invocation.method(
          #setup,
          [],
        ),
        returnValue: _i10.Future<bool>.value(false),
        returnValueForMissingStub: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);
  @override
  _i10.Future<_i5.Bep20Smc> getBep20Smc(String? addressHex) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBep20Smc,
          [addressHex],
        ),
        returnValue: _i10.Future<_i5.Bep20Smc>.value(_FakeBep20Smc_3(
          this,
          Invocation.method(
            #getBep20Smc,
            [addressHex],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i5.Bep20Smc>.value(_FakeBep20Smc_3(
          this,
          Invocation.method(
            #getBep20Smc,
            [addressHex],
          ),
        )),
      ) as _i10.Future<_i5.Bep20Smc>);
  @override
  _i10.Future<_i6.PaymentSmc> getPaymentSmc() => (super.noSuchMethod(
        Invocation.method(
          #getPaymentSmc,
          [],
        ),
        returnValue: _i10.Future<_i6.PaymentSmc>.value(_FakePaymentSmc_4(
          this,
          Invocation.method(
            #getPaymentSmc,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i6.PaymentSmc>.value(_FakePaymentSmc_4(
          this,
          Invocation.method(
            #getPaymentSmc,
            [],
          ),
        )),
      ) as _i10.Future<_i6.PaymentSmc>);
  @override
  _i10.Future<_i7.PancakeSwapSmc> getPancakeSwapSmc() => (super.noSuchMethod(
        Invocation.method(
          #getPancakeSwapSmc,
          [],
        ),
        returnValue:
            _i10.Future<_i7.PancakeSwapSmc>.value(_FakePancakeSwapSmc_5(
          this,
          Invocation.method(
            #getPancakeSwapSmc,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i7.PancakeSwapSmc>.value(_FakePancakeSwapSmc_5(
          this,
          Invocation.method(
            #getPancakeSwapSmc,
            [],
          ),
        )),
      ) as _i10.Future<_i7.PancakeSwapSmc>);
  @override
  _i10.Future<num> balanceOf({
    required String? smcAddressHex,
    required _i8.EthPrivateKey? privateKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #balanceOf,
          [],
          {
            #smcAddressHex: smcAddressHex,
            #privateKey: privateKey,
          },
        ),
        returnValue: _i10.Future<num>.value(0),
        returnValueForMissingStub: _i10.Future<num>.value(0),
      ) as _i10.Future<num>);
  @override
  _i10.Future<num> allowance({
    required _i16.Asset? asset,
    required _i8.EthPrivateKey? privateKey,
    required String? contractAddress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #allowance,
          [],
          {
            #asset: asset,
            #privateKey: privateKey,
            #contractAddress: contractAddress,
          },
        ),
        returnValue: _i10.Future<num>.value(0),
        returnValueForMissingStub: _i10.Future<num>.value(0),
      ) as _i10.Future<num>);
  @override
  _i10.Future<_i8.TransactionReceipt?> getTransactionReceipt(
    _i16.Asset? asset,
    String? txHash,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionReceipt,
          [
            asset,
            txHash,
          ],
        ),
        returnValue: _i10.Future<_i8.TransactionReceipt?>.value(),
        returnValueForMissingStub: _i10.Future<_i8.TransactionReceipt?>.value(),
      ) as _i10.Future<_i8.TransactionReceipt?>);
  @override
  _i10.Future<_i8.TransactionInformation?> getTransactionByHash(
    _i16.Asset? asset,
    String? txHash,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactionByHash,
          [
            asset,
            txHash,
          ],
        ),
        returnValue: _i10.Future<_i8.TransactionInformation?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i8.TransactionInformation?>.value(),
      ) as _i10.Future<_i8.TransactionInformation?>);
  @override
  _i10.Future<_i8.Transaction> buildApproveTransaction({
    required _i8.EthPrivateKey? privateKey,
    required _i16.Asset? asset,
    required String? contractAddress,
    required BigInt? amount,
    num? gasPrice = 0,
    int? nonce,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildApproveTransaction,
          [],
          {
            #privateKey: privateKey,
            #asset: asset,
            #contractAddress: contractAddress,
            #amount: amount,
            #gasPrice: gasPrice,
            #nonce: nonce,
          },
        ),
        returnValue: _i10.Future<_i8.Transaction>.value(_FakeTransaction_6(
          this,
          Invocation.method(
            #buildApproveTransaction,
            [],
            {
              #privateKey: privateKey,
              #asset: asset,
              #contractAddress: contractAddress,
              #amount: amount,
              #gasPrice: gasPrice,
              #nonce: nonce,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i8.Transaction>.value(_FakeTransaction_6(
          this,
          Invocation.method(
            #buildApproveTransaction,
            [],
            {
              #privateKey: privateKey,
              #asset: asset,
              #contractAddress: contractAddress,
              #amount: amount,
              #gasPrice: gasPrice,
              #nonce: nonce,
            },
          ),
        )),
      ) as _i10.Future<_i8.Transaction>);
  @override
  _i10.Future<String> sendApproval({
    required _i8.EthPrivateKey? privateKey,
    required _i16.Asset? asset,
    required String? contractAddress,
    num? gasPrice = 0,
    int? nonce,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendApproval,
          [],
          {
            #privateKey: privateKey,
            #asset: asset,
            #contractAddress: contractAddress,
            #gasPrice: gasPrice,
            #nonce: nonce,
          },
        ),
        returnValue: _i10.Future<String>.value(''),
        returnValueForMissingStub: _i10.Future<String>.value(''),
      ) as _i10.Future<String>);
  @override
  _i10.Future<bool> isEnoughBnb({
    required _i8.EthPrivateKey? privateKey,
    required _i16.Asset? asset,
    required num? amount,
    required num? gasPrice,
    required num? estimatedGas,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isEnoughBnb,
          [],
          {
            #privateKey: privateKey,
            #asset: asset,
            #amount: amount,
            #gasPrice: gasPrice,
            #estimatedGas: estimatedGas,
          },
        ),
        returnValue: _i10.Future<bool>.value(false),
        returnValueForMissingStub: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);
  @override
  _i10.Future<List<_i17.GasFee>> getBSCGasFees() => (super.noSuchMethod(
        Invocation.method(
          #getBSCGasFees,
          [],
        ),
        returnValue: _i10.Future<List<_i17.GasFee>>.value(<_i17.GasFee>[]),
        returnValueForMissingStub:
            _i10.Future<List<_i17.GasFee>>.value(<_i17.GasFee>[]),
      ) as _i10.Future<List<_i17.GasFee>>);
  @override
  _i10.Future<dynamic> setupPaymentContract() => (super.noSuchMethod(
        Invocation.method(
          #setupPaymentContract,
          [],
        ),
        returnValue: _i10.Future<dynamic>.value(),
        returnValueForMissingStub: _i10.Future<dynamic>.value(),
      ) as _i10.Future<dynamic>);
  @override
  _i10.Future<_i8.Transaction> buildDepositTransaction({
    required _i8.EthPrivateKey? privateKey,
    required List<dynamic>? parameters,
    required num? gasPrice,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildDepositTransaction,
          [],
          {
            #privateKey: privateKey,
            #parameters: parameters,
            #gasPrice: gasPrice,
          },
        ),
        returnValue: _i10.Future<_i8.Transaction>.value(_FakeTransaction_6(
          this,
          Invocation.method(
            #buildDepositTransaction,
            [],
            {
              #privateKey: privateKey,
              #parameters: parameters,
              #gasPrice: gasPrice,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i8.Transaction>.value(_FakeTransaction_6(
          this,
          Invocation.method(
            #buildDepositTransaction,
            [],
            {
              #privateKey: privateKey,
              #parameters: parameters,
              #gasPrice: gasPrice,
            },
          ),
        )),
      ) as _i10.Future<_i8.Transaction>);
  @override
  _i10.Future<num> getPaymentDepositFee() => (super.noSuchMethod(
        Invocation.method(
          #getPaymentDepositFee,
          [],
        ),
        returnValue: _i10.Future<num>.value(0),
        returnValueForMissingStub: _i10.Future<num>.value(0),
      ) as _i10.Future<num>);
  @override
  _i10.Future<_i18.PaymentDiscountInfo?> getPaymentDiscountFee({
    required String? contractAddress,
    required num? amount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaymentDiscountFee,
          [],
          {
            #contractAddress: contractAddress,
            #amount: amount,
          },
        ),
        returnValue: _i10.Future<_i18.PaymentDiscountInfo?>.value(),
        returnValueForMissingStub:
            _i10.Future<_i18.PaymentDiscountInfo?>.value(),
      ) as _i10.Future<_i18.PaymentDiscountInfo?>);
  @override
  _i10.Future<BigInt> debugPaymentDepositFee({
    required _i16.Asset? asset,
    required num? amount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #debugPaymentDepositFee,
          [],
          {
            #asset: asset,
            #amount: amount,
          },
        ),
        returnValue: _i10.Future<BigInt>.value(_FakeBigInt_7(
          this,
          Invocation.method(
            #debugPaymentDepositFee,
            [],
            {
              #asset: asset,
              #amount: amount,
            },
          ),
        )),
        returnValueForMissingStub: _i10.Future<BigInt>.value(_FakeBigInt_7(
          this,
          Invocation.method(
            #debugPaymentDepositFee,
            [],
            {
              #asset: asset,
              #amount: amount,
            },
          ),
        )),
      ) as _i10.Future<BigInt>);
  @override
  _i10.Future<String> sendPaymentTransaction({
    required _i8.EthPrivateKey? privateKey,
    required _i8.Transaction? tx,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendPaymentTransaction,
          [],
          {
            #privateKey: privateKey,
            #tx: tx,
          },
        ),
        returnValue: _i10.Future<String>.value(''),
        returnValueForMissingStub: _i10.Future<String>.value(''),
      ) as _i10.Future<String>);
  @override
  _i10.Future<num> estimateGas({
    required _i8.EthereumAddress? address,
    required _i8.Transaction? transaction,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateGas,
          [],
          {
            #address: address,
            #transaction: transaction,
          },
        ),
        returnValue: _i10.Future<num>.value(0),
        returnValueForMissingStub: _i10.Future<num>.value(0),
      ) as _i10.Future<num>);
  @override
  _i10.Future<BigInt?> getSwapAmountOut(
          {required _i19.PancakeSwap? pancakeSwap}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSwapAmountOut,
          [],
          {#pancakeSwap: pancakeSwap},
        ),
        returnValue: _i10.Future<BigInt?>.value(),
        returnValueForMissingStub: _i10.Future<BigInt?>.value(),
      ) as _i10.Future<BigInt?>);
  @override
  _i10.Future<BigInt?> getSwapAmountIn(
          {required _i19.PancakeSwap? pancakeSwap}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSwapAmountIn,
          [],
          {#pancakeSwap: pancakeSwap},
        ),
        returnValue: _i10.Future<BigInt?>.value(),
        returnValueForMissingStub: _i10.Future<BigInt?>.value(),
      ) as _i10.Future<BigInt?>);
  @override
  _i10.Future<String> swap({
    required _i8.EthPrivateKey? privateKey,
    required num? gasPrice,
    required num? gasLimit,
    required _i19.PancakeSwap? pancakeSwap,
    required _i8.Transaction? tx,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #swap,
          [],
          {
            #privateKey: privateKey,
            #gasPrice: gasPrice,
            #gasLimit: gasLimit,
            #pancakeSwap: pancakeSwap,
            #tx: tx,
          },
        ),
        returnValue: _i10.Future<String>.value(''),
        returnValueForMissingStub: _i10.Future<String>.value(''),
      ) as _i10.Future<String>);
  @override
  _i10.Future<_i8.Transaction> buildSwapContractTransaction({
    required _i8.EthPrivateKey? privateKey,
    required _i19.PancakeSwap? pancakeSwap,
    required num? gasPrice,
    int? nonce,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildSwapContractTransaction,
          [],
          {
            #privateKey: privateKey,
            #pancakeSwap: pancakeSwap,
            #gasPrice: gasPrice,
            #nonce: nonce,
          },
        ),
        returnValue: _i10.Future<_i8.Transaction>.value(_FakeTransaction_6(
          this,
          Invocation.method(
            #buildSwapContractTransaction,
            [],
            {
              #privateKey: privateKey,
              #pancakeSwap: pancakeSwap,
              #gasPrice: gasPrice,
              #nonce: nonce,
            },
          ),
        )),
        returnValueForMissingStub:
            _i10.Future<_i8.Transaction>.value(_FakeTransaction_6(
          this,
          Invocation.method(
            #buildSwapContractTransaction,
            [],
            {
              #privateKey: privateKey,
              #pancakeSwap: pancakeSwap,
              #gasPrice: gasPrice,
              #nonce: nonce,
            },
          ),
        )),
      ) as _i10.Future<_i8.Transaction>);
  @override
  _i10.Future<bool> waitForReceiptResult(
    _i16.Asset? asset,
    String? txHash,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #waitForReceiptResult,
          [
            asset,
            txHash,
          ],
        ),
        returnValue: _i10.Future<bool>.value(false),
        returnValueForMissingStub: _i10.Future<bool>.value(false),
      ) as _i10.Future<bool>);
}
